buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://kotlin.bintray.com/kotlin-dev' }
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_tools_gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.google.gms:google-services:$android_google_services_version"
        classpath "io.fabric.tools:gradle:$fabric_tools_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://kotlin.bintray.com/kotlin-dev' }
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = jvm_target
        targetCompatibility = jvm_target

        kotlinOptions {
            jvmTarget = jvm_target
            apiVersion = kotlin_language_version
            languageVersion = kotlin_language_version
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlin.Experimental",
                "-XXLanguage:+InlineClasses"
        ]
    }

    afterEvaluate {
        tasks.withType(com.android.build.gradle.tasks.LintBaseTask)?.all {
            enabled = false
        }
        tasks.withType(JavaCompile) {
            options.fork = true
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
